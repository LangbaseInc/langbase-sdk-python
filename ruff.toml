# Ruff configuration for Langbase Python SDK

# Same line length as Black
line-length = 88

# Target Python 3.7+
target-version = "py37"

# Allow autofix for all enabled rules
fix = true

# Exclude directories
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
]

[lint]
# Enable various lint rules
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # line too long (handled by Black)
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "PLR0912", # too many branches (functions can be complex)


    # Import-related rules (if you prefer current style)
    # "TID252",  # prefer absolute imports over relative imports
    # "PLC0415", # import should be at top-level

    # Pathlib rules (if you prefer os.path)
    # "PTH113",  # os.path.isfile() should be Path.is_file()
    # "PTH123",  # open() should be Path.open()

    # Exception rules (if you don't mind string literals)
    # "EM101",   # exception must not use string literal
    # "EM102",   # exception must not use f-string literal
    # "B904",    # exception chaining with 'raise ... from err'

    # Code style rules (if you prefer current style)
    # "RUF013",  # implicit Optional type
    # "RET504",  # unnecessary assignment before return
    # "UP028",   # replace yield loop with yield from
    # "RUF034",  # useless if-else condition
    # "SIM108",  # use ternary operator instead of if-else
]

# Allow unused variables when prefixed with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Allow unused imports in __init__.py files
"__init__.py" = ["F401"]

# Allow assert statements in test files
"tests/*.py" = ["S101", "PLR2004"]

# Allow various rules in examples since they're demonstration files
"examples/*.py" = [
    "T201",     # print statements
    "PLR2004",  # magic value comparison
    "PLR1722",  # use sys.exit instead of exit
    "EM101",    # exception string literals
    "PLC0415",  # import at top level
    "PLR0915",  # too many statements
    "F841",     # unused variables
    "F821",     # undefined names
    "PTH123",   # use pathlib
    "W291",     # trailing whitespace
    "W293",     # blank line whitespace
    "E501",     # line too long
]
